42,47c42,47
< 	if ( memberNode->bFailed ) {
< 		return false;
< 	}
< 	else {
< 		return emulNet->ENrecv(&(memberNode->addr), enqueueWrapper, NULL, 1, &(memberNode->mp1q));
< 	}
---
>     if ( memberNode->bFailed ) {
>     	return false;
>     }
>     else {
>     	return emulNet->ENrecv(&(memberNode->addr), enqueueWrapper, NULL, 1, &(memberNode->mp1q));
>     }
68,69c68,69
< 	Address joinaddr;
< 	joinaddr = getJoinAddress();
---
>     Address joinaddr;
>     joinaddr = getJoinAddress();
71,72c71,72
< 	// Self booting routines
< 	if( initThisNode(&joinaddr) == -1 ) {
---
>     // Self booting routines
>     if( initThisNode(&joinaddr) == -1 ) {
74c74
< 		log->LOG(&memberNode->addr, "init_thisnode failed. Exit.");
---
>         log->LOG(&memberNode->addr, "init_thisnode failed. Exit.");
76,77c76,77
< 		exit(1);
< 	}
---
>         exit(1);
>     }
79,80c79,80
< 	if( !introduceSelfToGroup(&joinaddr) ) {
< 		finishUpThisNode();
---
>     if( !introduceSelfToGroup(&joinaddr) ) {
>         finishUpThisNode();
82c82
< 		log->LOG(&memberNode->addr, "Unable to join self to group. Exiting.");
---
>         log->LOG(&memberNode->addr, "Unable to join self to group. Exiting.");
84,85c84,85
< 		exit(1);
< 	}
---
>         exit(1);
>     }
87c87
< 	return;
---
>     return;
105c105
< 	// node is up!
---
>     // node is up!
110c110
< 	initMemberListTable(memberNode);
---
>     initMemberListTable(memberNode);
112c112
< 	return 0;
---
>     return 0;
123c123
< 	static char s[1024];
---
>     static char s[1024];
126,127c126,127
< 	if ( 0 == strcmp((char *)&(memberNode->addr.addr), (char *)&(joinaddr->addr))) {
< 		// I am the group booter (first process to join the group). Boot up the group
---
>     if ( 0 == memcmp((char *)&(memberNode->addr.addr), (char *)&(joinaddr->addr), sizeof(memberNode->addr.addr))) {
>         // I am the group booter (first process to join the group). Boot up the group
129c129
< 		log->LOG(&memberNode->addr, "Starting up group...");
---
>         log->LOG(&memberNode->addr, "Starting up group...");
131,145c131,140
< 		memberNode->inGroup = true;
< 	}
< 	else {
< 		size_t msgsize = sizeof(MessageHdr) + sizeof(joinaddr->addr) + sizeof(long) + 1;
< 		msg = (MessageHdr *) malloc(msgsize * sizeof(char));
< 
< 		// create JOINREQ message: format of data is {struct Address myaddr}
< 		//4 bytes - Msg Type
< 		//4 + 2 bytes - member address
< 		//1 byte - padding
< 		//8 bytes - heartbeat
< 		msg->msgType = JOINREQ;
< 		memcpy((char *)(msg+1), &memberNode->addr.addr, sizeof(memberNode->addr.addr));
< 		//memberNode->heartbeat = 1085369722171885063;
< 		memcpy((char *)(msg+1) + 1 + sizeof(memberNode->addr.addr), &memberNode->heartbeat, sizeof(long));
---
>         memberNode->inGroup = true;
>     }
>     else {
>         size_t msgsize = sizeof(MessageHdr) + sizeof(joinaddr->addr) + sizeof(long) + 1;
>         msg = (MessageHdr *) malloc(msgsize * sizeof(char));
> 
>         // create JOINREQ message: format of data is {struct Address myaddr}
>         msg->msgType = JOINREQ;
>         memcpy((char *)(msg+1), &memberNode->addr.addr, sizeof(memberNode->addr.addr));
>         memcpy((char *)(msg+1) + 1 + sizeof(memberNode->addr.addr), &memberNode->heartbeat, sizeof(long));
148,149c143,144
< 		sprintf(s, "Trying to join...");
< 		log->LOG(&memberNode->addr, s);
---
>         sprintf(s, "Trying to join...");
>         log->LOG(&memberNode->addr, s);
152,153c147,148
< 		// send JOINREQ message to introducer member
< 		emulNet->ENsend(&memberNode->addr, joinaddr, (char *)msg, msgsize);
---
>         // send JOINREQ message to introducer member
>         emulNet->ENsend(&memberNode->addr, joinaddr, (char *)msg, msgsize);
155,156c150,151
< 		free(msg);
< 	}
---
>         free(msg);
>     }
158c153
< 	return 1;
---
>     return 1;
168,175c163,165
< 	/*
< 	 * Your code goes here
< 	 */
< 
< 
< 	memberNode->inGroup = false;
< 	memberNode->memberList.clear();
< 
---
>    /*
>     * Your code goes here
>     */
185,200c175,185
< 	if (memberNode->bFailed) {
< 		return;
< 	}
< 
< 	// Check my messages
< 	checkMessages();
< 
< 	// Wait until you're in the group...
< 	if( !memberNode->inGroup ) {
< 		return;
< 	}
< 	memberNode->heartbeat = (memberNode->heartbeat)+1;
< 	// ...then jump in and share your responsibilites!
< 	nodeLoopOps();
< 
< 	printMemberListTable();
---
>     if (memberNode->bFailed) {
>     	return;
>     }
> 
>     // Check my messages
>     checkMessages();
> 
>     // Wait until you're in the group...
>     if( !memberNode->inGroup ) {
>     	return;
>     }
202c187,188
< 	//printMemberListTable();
---
>     // ...then jump in and share your responsibilites!
>     nodeLoopOps();
204c190
< 	return;
---
>     return;
213,214c199,200
< 	void *ptr;
< 	int size;
---
>     void *ptr;
>     int size;
216,223c202,209
< 	// Pop waiting messages from memberNode's mp1q
< 	while ( !memberNode->mp1q.empty() ) {
< 		ptr = memberNode->mp1q.front().elt;
< 		size = memberNode->mp1q.front().size;
< 		memberNode->mp1q.pop();
< 		recvCallBack((void *)memberNode, (char *)ptr, size);
< 	}
< 	return;
---
>     // Pop waiting messages from memberNode's mp1q
>     while ( !memberNode->mp1q.empty() ) {
>     	ptr = memberNode->mp1q.front().elt;
>     	size = memberNode->mp1q.front().size;
>     	memberNode->mp1q.pop();
>     	recvCallBack((void *)memberNode, (char *)ptr, size);
>     }
>     return;
235,328d220
< 	//printf("\n");
< 	//for (int i =  0; i < size ; i++)
< 	//printf ("%d:%d ", i , *(data+i));
< 	//printf("\n");
< 
< 	int *msgType = (int *)(data);
< 	if (*msgType == JOINREQ){
< 
< 		//Read Message:
< 		int *senderAddress = (int *) (data+4);
< 		short *senderPort = (short *)(data+4+2);
< 		long *heartbeat = (long *)(data+11);
< 
< 		//printf("JoinREQ: From: %d%x. Heartbeat:%lu\n", *senderAddress, *senderPort, *heartbeat);
< 
< 		//1-Add new member to the member list
< 		addOrUpdateEntry(*senderAddress, *senderPort, *heartbeat);
< 
< 		//2-Create Response Message
< 		//2.1 - Get destination address
< 		Address destinationAddr = getAddress(*senderAddress, *senderPort);
< 		//2.2 - Create message
< 		MessageHdr *msg;
< 		size_t msgsize = sizeof(MessageHdr) 	//4 bytes: Msg Type
< 																				+ sizeof(destinationAddr.addr) //6 bytes: own address
< 																				+ 1 			//1 byte: padding
< 																				+ sizeof(long) 	//8 bytes: heartbeat
< 																				+ sizeof(int)  	//4 bytes: size of table
< 																				+  memberNode->memberList.size()*14;	//n*14 : table with n elements
< 		msg = (MessageHdr *) malloc(msgsize * sizeof(char));
< 		msg->msgType =  JOINREP;
< 		memcpy((char *)(msg+1), &memberNode->addr.addr, sizeof(memberNode->addr.addr));
< 
< 		//memberNode->heartbeat = 66055;
< 		memcpy((char *)(msg+1) + 1 + sizeof(memberNode->addr.addr), &memberNode->heartbeat, sizeof(long));
< 
< 		int currentOffset = 4+1+ sizeof(memberNode->addr.addr) + sizeof(long);
< 		char *ptr = ((char*) msg + currentOffset);
< 		writeMemberListTable(ptr);
< 
< 		//3-Send Message
< 		emulNet->ENsend(&memberNode->addr, &destinationAddr, (char *)msg, msgsize);
< 		free(msg);
< 		//free(&destinationAddr);
< 
< 		printMemberListTable();
< 
< 	}
< 
< 	else if (*msgType == JOINREP || *msgType == HEARTBEAT ){
< 		memberNode->inGroup = true;
< 		//1 Read Message headers:
< 		int offset = sizeof(int);
< 		int *senderAddress = (int *) (data+offset);
< 		offset += sizeof(int);
< 
< 		short *senderPort = (short *)(data+offset);
< 		offset += sizeof(short) + 1; //includes 1 byte pad
< 
< 		long *heartbeat = (long *)(data+offset);
< 		offset += sizeof(long);
< 		addOrUpdateEntry(*senderAddress, *senderPort, *heartbeat);
< 
< 		int *numberElements = (int *) (data+offset);
< 		offset += sizeof(int);
< 
< 		if (*msgType == JOINREP)
< 			;
< 		//printf("JoinREP: From: %d:%x. Heartbeat:%lu, Elements:%d\n", *senderAddress, *senderPort, *heartbeat, *numberElements);
< 		if (*msgType == HEARTBEAT)
< 			;//printf("Heartbeat: From: %d:%x. Heartbeat:%lu, Elements:%d\n", *senderAddress, *senderPort, *heartbeat, *numberElements);
< 
< 
< 		//2 read content of member list
< 		for (int i = 0; i < *numberElements; i++){
< 
< 			int *id = (int *) (data + offset);
< 			offset += sizeof(int);
< 			short *port = (short *) (data + offset);
< 			offset += sizeof(short);
< 			long *hb = (long *) (data + offset);
< 			offset += sizeof(long);
< 			//	printf("\tJoinREP Loop %d - %d:%x. Heartbeat:%lu\n", i, *id, *port, *hb);
< 
< 			addOrUpdateEntry(*id, *port, *hb);
< 		}
< 
< 
< 	}
< 	else {
< 		printf("Received an unknown kind of message. Ignoring.\n");
< 	}
< 
< 
344,421c236
< 	//check status of neighbours:
< 	for (int i = 0; i < memberNode->memberList.size();i++){
< 		int id = memberNode->memberList.at(i).id;
< 		short port = memberNode->memberList.at(i).port;
< 		long lastHb = memberNode->memberList.at(i).heartbeat;
< 		long timestamp = memberNode->memberList.at(i).timestamp;
< 
< 		long diff = memberNode->heartbeat - timestamp;
< 		//printf("checking life.. %d:%x .. diff is: %lu \n" , id, port, diff);
< 
< 		if (lastHb != -1 && diff > TREMOVE + TFAIL){
< 			printf("Removing %d:%x .. diff was: %lu " , id, port, diff);
< 			Address currAddr = getAddress(id,port);
< 			memberNode->memberList.at(i).setheartbeat(-1);
< 			log->logNodeRemove(&memberNode->addr, &currAddr);
< 		}
< 
< 
< 
< 	}
< 
< 
< 
< 	//send a heartbeat and propagate memberlist pigbacked
< 
< 	MessageHdr *msg;
< 	size_t msgsize = sizeof(MessageHdr) + sizeof(memberNode->addr)																		+ 1 + sizeof(long) + sizeof(int) +  memberNode->memberList.size()*14 ;
< 	msg = (MessageHdr *) malloc(msgsize * sizeof(char));
< 
< 	// 4 bytes: Type:
< 	msg->msgType = HEARTBEAT;
< 
< 	// 6 bytes: address
< 	memcpy((char *)(msg+1), &memberNode->addr.addr, sizeof(memberNode->addr.addr));
< 
< 	//8 bytes: heartbeat + 1 byte padding
< 	memcpy((char *)(msg+1) + 1 + sizeof(memberNode->addr.addr), &memberNode->heartbeat, sizeof(long));
< 
< 	int currentOffset = 4+1+ sizeof(memberNode->addr.addr) + sizeof(long);
< 	char *ptr = ((char*) msg + currentOffset);
< 	writeMemberListTable(ptr);
< 
< 
< 
< 	//broadcast
< 	for (int i = 0; i < memberNode->memberList.size();i++){
< 		Address *destinationAddr;
< 		destinationAddr = (Address *) malloc(1 * sizeof(Address));
< 		int id = memberNode->memberList.at(i).id;
< 		short port = memberNode->memberList.at(i).port;
< 
< 		memcpy((char *)(destinationAddr->addr), &id, sizeof(int));
< 		memcpy((char *)(destinationAddr->addr+sizeof(int)), &port, sizeof(short));
< 
< 
< 		emulNet->ENsend(&memberNode->addr, destinationAddr, (char *)msg, msgsize);
< 		free (destinationAddr);
< 
< 	}
< 	free (msg);
< 
< 
< 	return;
< }
< 
< 
< 
< /*
<  * returns an Address with the given address and port.
<  */
< Address MP1Node::getAddress(int address, short port) {
< 
< 	Address addr;
< 	memset(&addr, 0, sizeof(Address));
< 	*(int *)(&addr.addr) = address;
< 	*(short *)(&addr.addr[4]) = port;
< 
< 	return addr;
---
>     return;
439c254
< 	Address joinaddr;
---
>     Address joinaddr;
441,443c256,258
< 	memset(&joinaddr, 0, sizeof(Address));
< 	*(int *)(&joinaddr.addr) = 1;
< 	*(short *)(&joinaddr.addr[4]) = 0;
---
>     memset(&joinaddr, 0, sizeof(Address));
>     *(int *)(&joinaddr.addr) = 1;
>     *(short *)(&joinaddr.addr[4]) = 0;
445c260
< 	return joinaddr;
---
>     return joinaddr;
448,563d262
< 
< /**
<  * Adds newMember to  to the memberList array
<  */
< void MP1Node::addMemberListTable(MemberListEntry newMember){
< 	MemberListEntry newMLE;
< 	memberNode->memberList.push_back(newMember);
< 
< 
< }
< 
< /*
<  * Adds a new MemberListEntry to the memberList array with the given parameters
<  */
< void MP1Node::addMemberListTable(int id, short port, long heartbeat){
< 	MemberListEntry newMLE;
< 
< 	newMLE.setid(id);
< 	newMLE.setport(port);
< 	newMLE.setheartbeat(heartbeat);
< 	newMLE.settimestamp(memberNode->heartbeat);
< 	addMemberListTable(newMLE);
< 
< }
< 
< /*
<  * Adds a new MemberListEntry to the memberList array with the given parameters
<  * If an element already exists with the given id:port, updates its Heartbeat  (if higher than the existing one)
<  */
< void MP1Node::addOrUpdateEntry(int id, short port, long hb){
< 
< 	//printf("Adding or updating member: received hb:%lu\n", hb);
< 
< 	//1-Check if exists is an entry for this id:port
< 	int found = 0;
< 	int i = 0;
< 	while (found == 0 && i <  memberNode->memberList.size()){
< 		int currentId = memberNode->memberList.at(i).id;
< 		short currentPort = memberNode->memberList.at(i).port;
< 
< 		if (currentId == id and currentPort == port  ){
< 			long currentHb =  memberNode->memberList.at(i).heartbeat;
< 			if (hb > currentHb && currentHb != -1 ){
< 
< 				//printf("updating: %d:%x . Hb: was: %lu, new: %lu!\n", id, port,memberNode->memberList.at(i).heartbeat, hb );
< 				//if eists, update heartbeart and timestamp:
< 				memberNode->memberList.at(i).heartbeat = hb;
< 				memberNode->memberList.at(i).timestamp = memberNode->heartbeat;
< 			}
< 			found = 1;
< 
< 		}
< 
< 
< 		i++;
< 	}
< 	//if entry was not found, add it
< 	if (found == 0){
< 		//printf("Adding new entry: %d:%x. hb: %lu\n", id, port, hb);
< 		//if doesnt exist, add it and log it
< 
< 		Address *newAddr;
< 		newAddr = (Address *) malloc(1 * sizeof(Address));
< 		memcpy((char *)(newAddr->addr), &id, sizeof(int));
< 		memcpy((char *)(newAddr->addr)+sizeof(int), &port, sizeof(short));
< 
< 		//Add new member to Member's list and log it
< 		addMemberListTable(id, port,  hb);
< 		log->logNodeAdd(&memberNode->addr, newAddr);
< 		free(newAddr);
< 	}
< 
< }
< 
< 
< /*
<  * Writes the content of MemberListTable to a char buffer.
<  * Not safe. The buffer pointed by ptr must have enough space for the content
<  * Total number of bytes copyed to the buffer:  4 + memberList.size()*14
<  * Structure of the copied content:
<  * 4 bytes - number of elements of the table
<  * For each member: 14 bytes:
<  * 	6 bytes (4+2): address
<  * 	8 bytes: heartbeat
<  *
<  */
< void MP1Node::writeMemberListTable(char *ptr){
< 	int size = memberNode->memberList.size();
< 	//int fakeSize = 19;
< 	memcpy(ptr, &size, sizeof(int));
< 	//printf("Writing table with %d elements to buffer.\n",size);
< 
< 	int currByte = sizeof(int);
< 	//Copy member list to message:
< 	for (int i = 0; i <  memberNode->memberList.size() ;i++){
< 
< 		int id = memberNode->memberList.at(i).id;
< 		memcpy( (ptr)+currByte, &id , sizeof (int));
< 		currByte = currByte + 4;
< 
< 		short port = memberNode->memberList.at(i).port;
< 		memcpy((ptr) + currByte,&port, sizeof (short));
< 		currByte = currByte + 2;
< 
< 		long hb = memberNode->memberList.at(i).heartbeat;
< 		memcpy( (ptr)+currByte, &hb, sizeof (long));
< 		currByte = currByte + 8;
< 
< 	}
< 
< 
< 
< }
< 
< 
< 
573,586d271
< void MP1Node::printMemberListTable() {
< 	int i = 0;
< 	printf("Printing MemberListTable: %d elements. I am: ",memberNode->memberList.size()   );
< 	printAddress(&memberNode->addr);
< 	for ( i = 0; i <  memberNode->memberList.size() ; i++){
< 		MemberListEntry curr = memberNode->memberList.at(i);
< 		printf("\t%d: Address: %d:%x, Hb: %lu, Timetamp: %lu\n",
< 				i, curr.getid(), curr.getport() , curr.getheartbeat(), curr.gettimestamp() );
< 
< 
< 	}
< 
< }
< 
594,595c279,280
< 	printf("%d.%d.%d.%d:%d \n",  addr->addr[0],addr->addr[1],addr->addr[2],
< 			addr->addr[3], *(short*)&addr->addr[4]) ;
---
>     printf("%d.%d.%d.%d:%d \n",  addr->addr[0],addr->addr[1],addr->addr[2],
>                                                        addr->addr[3], *(short*)&addr->addr[4]) ;    
597d281
< 
